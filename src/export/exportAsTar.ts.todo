import { pack } from 'tar-stream';
import { IWallpaper } from '../utils/IWallpaper';
import { exportAsHtml } from './exportAsHtml';
import { PackageExportOptions } from './exportAsZip';
import { streamTobuffer } from './utils/streamToBuffer.ts.todo';

/**
 * Exports wallpaper as HTML website into TAR package
 *
 * @param wallpaper Wallpaper to make website from
 * @param options
 * @returns TAR package
 */
export async function exportAsTar(wallpaper: IWallpaper, options: PackageExportOptions): Promise<Buffer> {
    const bundle = pack();

    const { files } = await exportAsHtml(wallpaper, { ...options, stylesPlace: 'EXTERNAL' });

    for (const file of files) {
        bundle.entry({ name: file.pathname }, file.content as string);
    }

    //forTime(1000).then(() => bundle.finalize());
    bundle.finalize();

    const bundleBuffer = await streamTobuffer(bundle);

    return bundleBuffer;
}

/**
 * TODO: [ðŸ›£] Not working in browser - it does not crash, but does not work conversion streamTobuffer
 * TODO: [optimize] Do in worker
 * TODO: [optimize] Lazy-load tar-stream package
 * TODO: Do all the TODOs from exportAsZip.ts
 * TODO: [ðŸ§ ] Unite return types of exportAsTar and exportAsZip - return just file OR buffer OR allow to choose OR some intermediate type exportable to anything
 */
