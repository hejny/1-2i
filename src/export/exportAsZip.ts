import JSZip from 'jszip';
import { IWallpaper } from '../utils/IWallpaper';
import { exportAsHtml } from './exportAsHtml';
import { getWallpaperBaseFilename } from './getWallpaperBaseFilename';
import { HtmlExportOptions } from './HtmlExportOptions';
import { blobToFile } from './utils/blobToFile';

export type PackageExportOptions = Omit<HtmlExportOptions, 'stylesPlace'>;

/**
 * Exports wallpaper as HTML website into ZIP package
 *
 * @param wallpaper Wallpaper to make website from
 * @param options
 * @returns ZIP package
 */
export async function exportAsZip(wallpaper: IWallpaper, options: PackageExportOptions): Promise<File> {
    const bundle = new JSZip();

    const { files } = await exportAsHtml(wallpaper, { ...options, stylesPlace: 'EXTERNAL' });

    for (const file of files) {
        bundle.file(file.pathname, file.content);
    }

    const bundleBlob = await bundle.generateAsync({ type: 'blob' });
    const bundleFile = blobToFile(bundleBlob, getWallpaperBaseFilename(wallpaper) + '.zip');

    return bundleFile;
}

/**
 * TODO: [‚õ±] Add buildId into bundle
 * TODO: [optimize] Do in worker
 * TODO: [optimize] Lazy-load jszip package
 * TODO: !! [üéç] Optionally: CNAME, Prettier, Vscode, GitHub
 * TODO: !! Add LICENSE.md
 * TODO: !! Add original src
 * TODO: !! Add Aiai.config.json
 * TODO: !! Generated by aiai in every file + metadata of images and zip
 * TODO: [üß†] Unite return types of exportAsTar and exportAsZip - return just file OR buffer OR allow to choose OR some intermediate type exportable to anything
 */
